
  //Location Related functions
function addLocation() {
  if (navigator.geolocation) {
    navigator.geolocation.getCurrentPosition(success, showError);
  } else {
    document.getElementById("location-status").innerText =
      "Geolocation is<br>not supported<br>by this browser.";
  }
}

function success(position) {
  obj.hlocation = position.coords.latitude + "&" + position.coords.longitude;
  objsignal.hlocation = true;
  // x.innerHTML =
  //   "Latitude: " +
  //   position.coords.latitude +
  //   "<br>Longitude: " +
  //   position.coords.longitude;
  document.getElementById("location-button").style.display = "none";
  document.getElementById("location-status").style.backgroundColor = "#63c28d";
  document.getElementById("location-status").innerText = "Added";
}

function showError(error) {
  obj.hlocation = "";
  objsignal.hlocation = false;
  switch (error.code) {
    case error.PERMISSION_DENIED:
      document.getElementById("location-status").innerText =
        "User denied the request for Geolocation.";
      break;
    case error.POSITION_UNAVAILABLE:
      document.getElementById("location-status").innerText =
        "Location information is unavailable.";
      break;
    case error.TIMEOUT:
      document.getElementById("location-status").innerText =
        "The request to get user location timed out.";
      break;
    case error.UNKNOWN_ERROR:
      document.getElementById("location-status").innerText =
        "An unknown error occurred.";
      break;
  }
}

  ******************************************************************************************************************************

  static createRequirementTags(obj) {
    let division = document.getElementById("req-edit-tags-section");

    let div = document.createElement("DIV");
    div.setAttribute("class", "room-tags ");
    let p = document.createElement("P");
    p.setAttribute("class", "label1 ");
    p.setAttribute("onclick", "RequirementInfo.editCard(" + obj.index + ")");
    p.innerText = obj.tagname;
    let button = document.createElement("BUTTON");
    button.setAttribute("class", "cross-button");
    button.setAttribute(
      "onclick",
      "RequirementInfo.removeCard(" + obj.index + ")"
    );
    button.innerHTML = "<strong>x</strong>";
    div.appendChild(p);
    div.appendChild(button);
    obj.tag = div;
    division.appendChild(div);
  }

  static createRequirementCards(obj) {
    var maindiv = document.getElementById("req-view-tags-section");
    var pdiv = document.createElement("div");
    pdiv.setAttribute("class", "field-box");

    var minicon = document.createElement("IMG");
    switch (obj.type) {
      case "ATM":
        minicon.setAttribute("src", "images/atm.svg");
        break;
      case "Medical Emergency":
        minicon.setAttribute("src", "images/medkit.svg");
        break;
      case "Bus Stop":
        minicon.setAttribute("src", "images/transport.svg");
        break;
      case "Theatre":
        minicon.setAttribute("src", "images/theatre.svg");
        break;
      case "Stationery":
        minicon.setAttribute("src", "images/stationery.svg");
        break;
      case "Saloon/Spa":
        minicon.setAttribute("src", "images/location-point.svg");
        break;
      case "Xerox":
        minicon.setAttribute("src", "images/location-point.svg");
        break;
      default:
        minicon.setAttribute("src", "images/location-point.svg");
        break;
    }
    minicon.setAttribute("class", "mini-icon");
    pdiv.appendChild(minicon);

    var hp = document.createElement("P");
    hp.setAttribute("class", "label2");
    hp.innerText = obj.requirement;
    pdiv.appendChild(hp);
    maindiv.appendChild(pdiv);
  }

  static editCard(index) {
    var obj;
    for (var i = 0; i < window.modifiedData.requirementInfo.length; i++) {
      if (window.modifiedData.requirementInfo[i].index === index) {
        window.modifiedData.requirementInfo[i].signal = true;
        obj = window.modifiedData.requirementInfo[i];
        break;
      }
    }
    document.getElementById("req-category").value = obj.type;
    document.getElementById("add-requirement").value = obj.requirement;

    document
      .getElementById("add-requirement")
      .setAttribute("class", "label1 hide");
    document
      .getElementById("update-requirement")
      .setAttribute("class", "label1");
  }

  static updateHotspot() {
    var obj;
    var index = 0;
    for (var i = 0; i < window.modifiedData.requirementInfo.length; i++) {
      if (window.modifiedData.requirementInfo[i].signal) {
        obj = window.modifiedData.requirementInfo[i];
        index = i;
        break;
      }
    }
    window.modifiedData.requirementInfo[index] = obj;
    obj.type = document.getElementById("req-category").value;
    obj.requirement = document.getElementById("new-requirement").value;
    if (obj.requirement.length > 10) obj.tagname = obj.requirement.slice(0, 10);
    else obj.tagname = obj.requirement;
    obj.signal = false;
    this.makeDefault();
  }

  static makeDefault() {
    document.getElementById("req-category").value = "ATM";
    document.getElementById("new-requirement").value = "";
    document.getElementById("add-requirement").setAttribute("class", "label1");
    document
      .getElementById("update-requirement")
      .setAttribute("class", "label1 hide");
    this.updateUi();
  }

  static addHotspot() {
    var obj = {
      signal: false,
      index: 0,
      requirement: "",
      type: "",
      tagname: "",
      tag: "",
      card: "",
    };
    obj.type = document.getElementById("req-category").value;
    obj.requirement = document.getElementById("new-requirement").value;
    if (obj.requirement.length > 10) obj.tagname = obj.requirement.slice(0, 10);
    else obj.tagname = obj.requirement;
    console.log(obj.tagname);
    obj.index = window.modifiedData.requirementInfo.length;
    window.modifiedData.requirementInfo.push(obj);
    this.makeDefault();
  }
*********************************************************************************************
## hostelRead.java

public static String getHostelTableNameFromLandmarkMinicode(String minicode) throws ClassNotFoundException, SQLException {
		Class.forName("com.mysql.jdbc.Driver");
		Connection con=DriverManager.getConnection(url,user,pass);
		String hostelsTable="";
		try {
			//getting landmark's hostels table name
			String sql="SELECT hostels_table from landmarks where mini_code=?";
			PreparedStatement st1= con.prepareStatement(sql);
			st1.setString(1,minicode);
			ResultSet rs=st1.executeQuery();
			while(rs.next()) {
				hostelsTable=rs.getString(1).toString();
				break;
			}
			System.out.println("hello mowa"+hostelsTable);
		}
		catch(Exception e) {
			System.out.println(e.getMessage());
		}
		con.close();
		return hostelsTable;
	}
*********************************************************************************************
## Registration.js
 
//LandMark Creation
// class StringProcessVar {
//   constructor(word) {
//     this.value = word;
//     this.cur = -1;
//   }
// }

// function createLandmark() {
//   var fname = String(document.getElementById("landmark-full-name").value);
//   var text = String(document.getElementById("landmark-description").value);
//   var signal = false;
//   if (
//     fname.length === "" ||
//     fname.length > 60 ||
//     fname.trim() === "" ||
//     text.length === "" ||
//     text.length > 150 ||
//     text.trim() === ""
//   ) {
//     signal = true;
//     alert("Please enter valid Data to create Landmark");
//   }
//   if (signal) {
//     return false;
//   } else {
//     var code = minicodeGenerator(fname);
//     var id1 = createLandmarkCode();
//     console.log({ id: id1, name: fname, minicode: code, des: text });
//     return { id: id1, name: fname, minicode: code, des: text };
//   }
// }

// function generateMinicode(objsList) {
//   var str = "";
//   objsList.forEach((element) => {
//     str += element[0].value.toUpperCase();
//   });
//   if (str.length < 7) {
//     var diff = 7 - str.length;
//   }
//   return str;
// }
=============================================================================================
function minicodeGenerator(fname) {
  var str = fname;
  if (str.length > 7) {
    str = str.slice(0, 8);
  } else if (str.length < 7) {
    var diff = 7 - str.length;
    for (var i = 0; i < diff; i++) {
      str += "A";
    }
  }
  return str;
  /*
  //Splitting full name to Words
  var words = fname.split(" ");
  words.forEach((element, index) => {
    if (element === "") {
      words.splice(index, 1);
    }
  });
  //Creating a  processing variables
  var objsList = [];
  words.forEach((elements) => {
    objsList.push(new StringProcessVar(element));
  });

  //genrating actual code
  var minicode = generateMinicode(objsList);*/
}
=============================================================================================
this used when there is no delay in table creation
function verifyLandmark() {
  var l = [];
  var obj = window.obj;
  currentLandmarks.forEach((element) => {
    l.push(element.minicode);
  });
  // console.log(obj);
  for (var i = 0; i < l.length; i++) {
    var element = l[i];
    // console.log(element, obj.hlandmark);
    if (obj.hlandmark === element) {
      console.log("landmark creation skipped");
      return false;
    }
  }
  // console.log("called below");
  var mini = obj.hlandmark;
  var lanid = createLandmarkCode();
  var fname = obj.hlfname;
  var htablename = "other_lan";
  window.obj.htablesname = htablename;
  obj = {
    signal: 0,
    id: lanid,
    minicode: mini,
    fullname: fname,
    tablename: htablename,
  };
  return obj;
}

function checkLandmark() {
  var v = verifyLandmark();
  if (v) {
    console.log("printing in check landmark", v);
    $.post("hostelRegister", v, function (data, status) {
      if (status === "success") {
        console.log("created new landmark");
      } else {
        alert("Something Went Wrong..!!");
      }
    });
    return true;
  }
  return false;
}

*********************************************************************************************
## Registration.jsp
    <div class="hide">
      <section class="landmark-setup">
        <div class="phrase2"><strong>Create Landmark</strong></div>
      </section>

      <section class="landmark-section">
        <div class="landmark-credentials">
          <div class="form-element pad">
            <label for="landmark-full-name" class="label"
              >Landmark Full Name</label
            >
            <input
              type="text"
              id="landmark-full-name"
              class="text-input"
              oninput="checkChange(6)"
            />
            <p id="landmark-full-name-message" class="notes message">
              60 charecters remaining
            </p>
          </div>
          <div class="form-element pad">
            <label for="landmark-description" class="label">Description</label>
            <input
              type="text"
              id="landmark-description"
              class="text-input"
              oninput="checkChange(7)"
            />
            <p id="landmark-description-message" class="notes message">
              150 charecters remaining
            </p>
          </div>
          <div style="display: flex; justify-content: end; align-items: center">
            <button id="ajaxcall" class="submit-button pad">Create</button>
          </div>
        </div>

        <div class="description">
          <li class="phrase1 notes">
            Create the landmark which is recognized by more people. Example like
            Collage, IT Hub, Traning Centers etc.,
          </li>
          <br />
          <li class="phrase1 notes">
            Give details about landmark in 'Description' field like it's
            city-name, area or any other information about it.
          </li>
          <br />
          <li class="phrase1 notes">
            This help our Team get Identified it as Landmark faster.
          </li>
          <br />
          <li class="phrase1 notes">
            The Landmarks Create by you are noted and inspected by our team
            later.
          </li>
          <br />
          <li class="phrase1 notes">
            If the landmark doesn't reach our requirements, Don't worry, We will
            contact you and clear the issue.
          </li>
          <br />
          <li class="phrase1 notes">
            Make Sure you must need to register the hostel, with the new
            landmark created
          </li>
        </div>
      </section>
    </div>
*********************************************************************************************

